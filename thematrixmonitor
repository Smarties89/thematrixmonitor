#!/usr/bin/python
import os
import logging
import sys
from time import sleep
import psutil

log = logging.getLogger()
logging.basicConfig()
log.setLevel(logging.DEBUG)
debug = os.environ.get("debug", "0") == "1"


def p(msg):
    sys.stdout.write(msg)
    sys.stdout.flush()


def memorypercent():
    return str(psutil.virtual_memory().percent)


def cpu():
    return str(psutil.cpu_percent())


netconns = []


def network():
    global netconns
    if not netconns:
        netconns = psutil.net_connections()
        if not netconns:
            return "Empty"

    result = netconns.pop()

    while result.laddr[0].startswith("::") or result.status == "NONE":
        result = netconns.pop()
    if result.status == "ESTABLISHED":
        return "{} {:16} {:16}".format(
            result.status[0],
            result.laddr[0]+":"+str(result.laddr[1]),
            result.raddr[0]+":"+str(result.raddr[1]))
    elif result.status == "LISTEN":
        if result.laddr[0] == "127.0.0.1":
            # We are not interested in local running services.
            return network()

        return "{} {:16} {:16}".format(
            result.status[0],
            result.laddr[0],
            "NA")
    else:
        return "ERROR IN network()"


ps = []


def processes():
    global ps
    if not ps:
        ps = map(lambda o: psutil.Process(o).name(), psutil.pids())
        if not ps:
            return "Empty"

        # remove duplicates and sort
        ps = sorted(list(set(ps)))
        ps.reverse()

    p = ps.pop()
    return p


entries = [
    cpu,
    network,
    memorypercent,
    processes
]


def main(refreshinterval):
    while True:
        for screenitem in entries:
            p(screenitem() + "\t")

        print("")
        sleep(refreshinterval)


if __name__ == "__main__":
    if len(sys.argv) == 1:
        refreshinterval = 0.4
    else:
        try:
            refreshinterval = float(sys.argv[1])
        except:
            print("First argument may only be the refreshinterval in float format")
    main(refreshinterval)
